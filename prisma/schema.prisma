// School Management System Database Schema
// Modern full-stack application with comprehensive features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management with role-based access
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  avatar    String?
  phone     String?
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations based on role
  adminProfile    Admin?
  teacherProfile  Teacher?
  studentProfile  Student?
  parentProfile   Parent?

  // Communication
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications    Notification[]
  fileUploads      FileUpload[]

  @@map("users")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

// Admin profile
model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  permissions String[] // JSON array of permissions
  department  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

// Teacher profile
model Teacher {
  id       String @id @default(cuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  employeeId  String   @unique
  department  String
  subject     String
  qualification String?
  experience  Int?     // years of experience
  salary      Decimal?
  joinDate    DateTime

  // Relations
  classes     Class[]
  subjects    Subject[]
  attendances Attendance[]
  grades      Grade[]
  assignments Assignment[]
  announcements Announcement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teachers")
}

// Student profile
model Student {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  studentId    String   @unique
  rollNumber   String   @unique
  classId      String?
  class        Class?   @relation(fields: [classId], references: [id])
  section      String
  admissionDate DateTime
  dateOfBirth  DateTime
  address      String
  parentId     String?
  parent       Parent?  @relation(fields: [parentId], references: [id])

  // Academic
  attendances  Attendance[]
  grades       Grade[]
  submissions  AssignmentSubmission[]
  feeRecords   FeeRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

// Parent profile
model Parent {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  occupation   String?
  relationship String // Father, Mother, Guardian
  address      String

  // Relations
  children Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("parents")
}

// Academic structure
model Class {
  id          String @id @default(cuid())
  name        String @unique // e.g., "Grade 10-A"
  grade       Int    // 1-12
  section     String // A, B, C, etc.
  teacherId   String
  teacher     Teacher @relation(fields: [teacherId], references: [id])
  
  capacity    Int    @default(30)
  academic_year String

  // Relations
  students    Student[]
  subjects    Subject[]
  attendances Attendance[]
  timetable   Timetable[]
  assignments Assignment[]
  announcements Announcement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([grade, section, academic_year])
  @@map("classes")
}

model Subject {
  id        String @id @default(cuid())
  name      String
  code      String @unique
  credits   Int    @default(1)
  
  classId   String
  class     Class   @relation(fields: [classId], references: [id])
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  // Academic
  grades      Grade[]
  assignments Assignment[]
  timetable   Timetable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subjects")
}

// Attendance system
model Attendance {
  id        String @id @default(cuid())
  date      DateTime @db.Date
  status    AttendanceStatus
  
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  classId   String
  class     Class   @relation(fields: [classId], references: [id])
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  remarks   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, date])
  @@map("attendances")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

// Grading system
model Grade {
  id          String @id @default(cuid())
  studentId   String
  student     Student @relation(fields: [studentId], references: [id])
  subjectId   String
  subject     Subject @relation(fields: [subjectId], references: [id])
  teacherId   String
  teacher     Teacher @relation(fields: [teacherId], references: [id])

  examType    ExamType
  marks       Decimal
  maxMarks    Decimal
  grade       String // A+, A, B+, etc.
  gpa         Decimal?
  
  examDate    DateTime
  remarks     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("grades")
}

enum ExamType {
  QUIZ
  ASSIGNMENT
  MIDTERM
  FINAL
  PROJECT
}

// Assignment system
model Assignment {
  id          String @id @default(cuid())
  title       String
  description String
  
  classId     String
  class       Class   @relation(fields: [classId], references: [id])
  subjectId   String
  subject     Subject @relation(fields: [subjectId], references: [id])
  teacherId   String
  teacher     Teacher @relation(fields: [teacherId], references: [id])

  dueDate     DateTime
  maxMarks    Decimal
  
  attachments String[] // File URLs
  
  submissions AssignmentSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assignments")
}

model AssignmentSubmission {
  id           String @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student @relation(fields: [studentId], references: [id])

  content      String?
  attachments  String[] // File URLs
  marks        Decimal?
  feedback     String?
  submittedAt  DateTime @default(now())
  gradedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

// Timetable
model Timetable {
  id        String @id @default(cuid())
  classId   String
  class     Class   @relation(fields: [classId], references: [id])
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  dayOfWeek Int      // 1-7 (Monday-Sunday)
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  room      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("timetable")
}

// Communication system
model Message {
  id         String @id @default(cuid())
  senderId   String
  sender     User   @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])

  subject    String
  content    String
  isRead     Boolean @default(false)
  
  attachments String[] // File URLs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Notification {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  title   String
  message String
  type    NotificationType
  isRead  Boolean @default(false)
  data    Json?   // Additional data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

enum NotificationType {
  ASSIGNMENT
  GRADE
  ATTENDANCE
  ANNOUNCEMENT
  FEE
  GENERAL
}

// Announcements
model Announcement {
  id        String @id @default(cuid())
  title     String
  content   String
  
  classId   String?
  class     Class?   @relation(fields: [classId], references: [id])
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  priority  Priority @default(MEDIUM)
  isActive  Boolean  @default(true)
  
  attachments String[] // File URLs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("announcements")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Fee management
model FeeRecord {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  feeType   FeeType
  amount    Decimal
  dueDate   DateTime
  paidDate  DateTime?
  status    FeeStatus @default(PENDING)
  
  remarks   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fee_records")
}

enum FeeType {
  TUITION
  LIBRARY
  LABORATORY
  SPORTS
  TRANSPORT
  EXAMINATION
  OTHER
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
  WAIVED
}

// File management
model FileUpload {
  id       String @id @default(cuid())
  filename String
  originalName String
  mimeType String
  size     Int
  url      String
  
  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  category FileCategory @default(OTHER)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("file_uploads")
}

enum FileCategory {
  ASSIGNMENT
  PROFILE_PICTURE
  DOCUMENT
  ANNOUNCEMENT
  OTHER
}
